import java.lang.annotation.Annotation;
import java.lang.annotation.Repeatable;

@Repeatable(value = Annotation.class)
public @interface Description {
    String title();

    int version() default 1;

    String text();
}

//Аннотации представляют собой некие метаданные, которые могут добавлятся в исходный код программы
// и семантически не влияют на нее, но могут использоваться в процессе анализа кода, компиляции и даже во время выполнения.

//    Вот основные варианты использования аннтоаций:
//        - предоставлять необходимую информацию для компилятора;
//        - предоставлять метаданные различным инструментам для генерации кода, конфигураций и т.д.;
//        - использоваться в коде во время выполнения програмного кода (reflection).

//Аннотации могут быть применены, например, к декларациям классов, полей, методов, ну и конечно же аннотаций.

//в качестве типов у элементов аннотации могут использоваться только примитивные типы, перечисления и класс String.

//Если у аннотации нет элементов, ее называют маркером (marker annotation type)

//когда аннтоация указывается для другой аннотации, первую называют мета-аннотацией (meta-annotation type)

//мета-аннтоация Retention - показывает, как долго необходимо хранить аннтоацию и инициализируется одним из трех значений:
//  - RetentionPolicy.SOURCE - аннотация используется на этапе компиляции и должна отбрасываться компилятором;
//  - RetentionPolicy.CLASS - аннтоация будет записана в class-файл компилятором, но не должна быть доступна во время выполнения (runtime);
//  g- RetentionPolicy.RUNTIME - аннотация будет записана в class-файл и доступна во время выполнения через reflection.