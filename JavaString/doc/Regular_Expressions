------------------------------------------------------------------------------------------------------------------------
A regular expression is a sequence of characters that forms a search pattern.
Regular expressions can be used to perform all types of text search and text replace operations.
------------------------------------------------------------------------------------------------------------------------
Regular expression (regex) - defines a search pattern for strings.
- The search pattern can be anything from a simple character, a fixed string or a complex expression containing
  special characters describing the pattern.
- A regex can be used to search, edit and manipulate text,
  this process is called: The regular expression is applied to the text/string.
- The regex is applied on the text from left to right. Once a source character has been used in a match,
  it cannot be reused. For example, the regex aba will match ababababa only two times (aba_aba__).

------------------------------------------------------------------------------------------------------------------------
 Regex examples

A simple example for a regular expression is a (literal) string. For example, the Hello World regex matches the "Hello World" string.
. (dot) is another example for a regular expression. A dot matches any single character; it would match, for example, "a" or "1".

Regex	                              Matches
this is text                          Matches exactly "this is text"

this\s+is\s+text                      Matches the word "this" followed by one or more whitespace characters
                                      followed by the word "is" followed by one or more whitespace characters
                                      followed by the word "text".

^\d+(\.\d+)?                          ^ defines that the patter must start at beginning of a new line.
                                      \d+ matches one or several digits.
                                      The ? makes the statement in brackets optional.
                                      \. matches ".",
                                      parentheses are used for grouping.
                                      Matches for example "5", "1.5" and "2.21".

------------------------------------------------------------------------------------------------------------------------
Rules of writing regular expressions

Regular Expression	        |Description
.                           |Matches any character. (Find just one instance of any character.)
                            |
^regex                      |Finds regex that must match at the beginning of the line.
^                           |Finds a match as the beginning of a string as in: ^Hello
                            |
regex$                      |Finds regex that must match at the end of the line.
                            |
[abc]                       |Set definition, can match the letter a or b or c.
                            |
[abc][vz]                   |Set definition, can match a or b or c followed by either v or z.
                            |
[^abc]                      |When a caret appears as the first character inside square brackets, it negates the pattern.
                            |This pattern matches any character except a or b or c.
                            |
[a-d1-7]                    |Ranges: matches a letter between a and d and figures from 1 to 7, but not d1.
                            |
X|Z                         |Finds X or Z.
                            |
XZ                          |Finds X directly followed by Z.
                            |
$                           |Checks if a line end follows. (Finds a match at the end of the string as in: World$.)
------------------------------------------------------------------------------------------------------------------------
Meta characters

Meta characters affect the way a pattern is matched, in a way adding logic to the search pattern.

The following meta characters have a pre-defined meaning and make certain common patterns easier to use.
For example, you can use \d as simplified definition for [0..9].

Regular Expression	         Description
\d                           |Any digit, short for [0-9]
                             |
\D                           |A non-digit, short for [^0-9]
                             |
\s                           |A whitespace character, short for [ \t\n\x0b\r\f]
                             |
\S                           |A non-whitespace character, short for
                             |
\w                           |A word character, short for [a-zA-Z_0-9]
                             |
\W                           |A non-word character [^\w]
                             |
\S+                          |Several non-whitespace characters
                             |
\b                           |Matches a word boundary where a word character is [a-zA-Z0-9_]
                             |
\1                           |references to the captured match of the first group
                             |
|                            |Find a match for any one of the patterns separated by | as in: cat|dog|fish
                             |
\uxxxx	                     |Find the Unicode character specified by the hexadecimal number xxxx
                             |
                             |
                             |

These meta characters have the same first letter as their representation, e.g., digit, space, word, and boundary.
Uppercase symbols define the opposite.

------------------------------------------------------------------------------------------------------------------------
Quantifier

A quantifier defines how often an element can occur. The symbols ?, *, + and {} are qualifiers.
Quantifiers define quantities.

Regular Expression	    Description	                                            Examples
*                       Occurs zero or more times, is short for {0,}            X* finds no or several letter X, <sbr />
                                                                                            .* finds any character sequence
n*	                    Matches any string that contains zero or more occurrences of n
---------
+                       Occurs one or more times, is short for {1,}             X+- Finds one or several letter X
n+	                    Matches any string that contains at least one n
---------
?                       Occurs no or one times, ? is short for {0,1}.           X? finds no or exactly one letter X
n?	                    Matches any string that contains zero or one occurrences of n
---------
{X}                     Occurs X number of times,
                        {} describes the order of the preceding liberal         \d{3} searches for three digits,
                                                                                            .{10} for any character sequence
                                                                                            of length 10.
n{x}	                Matches any string that contains a sequence of X n's
---------
{X,Y}                   Occurs between X and Y times,                           \d{1,4} means \d must occur at least once
                                                                                            and at a maximum of four.
n{x,y}	                Matches any string that contains a sequence of X to Y n's
---------
*?                      ? after a quantifier makes it a reluctant quantifier.
                        It tries to find the smallest match.
                        This makes the regular expression
                        stop at the first match.
---------
n{x,}	Matches any string that contains a sequence of at least X n's
---------
------------------------------------------------------------------------------------------------------------------------
Grouping and back reference

You can group parts of your regular expression. In your pattern you group elements with round brackets, e.g., ().
This allows you to assign a repetition operator to a complete group.

In addition these groups also create a back reference to the part of the regular expression. This captures the group.
A back reference stores the part of the String which matched the group. This allows you to use this part in the replacement.

Via the $ you can refer to a group. $1 is the first group, $2 the second, etc.

Letâ€™s, for example, assume you want to replace all whitespace between a letter followed by a point or a comma.
This would involve that the point or the comma is part of the pattern. Still it should be included in the result.
        // Removes whitespace between a word character and . or ,
        String pattern = "(\\w)(\\s+)([\\.,])";
        System.out.println(EXAMPLE_TEST.replaceAll(pattern, "$1$3"));
------------------------------------------------------------------------------------------------------------------------
Negative look ahead

Negative look ahead provides the possibility to exclude a pattern.
With this you can say that a string should not be followed by another string.

Negative look ahead are defined via (?!pattern). For example, the following will match "a" if "a" is not followed by "b".
        a(?!b)
------------------------------------------------------------------------------------------------------------------------
Specifying modes inside the regular expression

You can add the mode modifiers to the start of the regex. To specify multiple modes, simply put them together as in (?ismx).
    - (?i) makes the regex case insensitive.
    - (?s) for "single line mode" makes the dot match all characters, including line breaks.
    - (?m) for "multi
------------------------------------------------------------------------------------------------------------------------
Backslashes in Java

The backslash \ is an escape character in Java Strings. That means backslash has a predefined meaning in Java.
You have to use double backslash \\ to define a single backslash.
If you want to define \w, then you must be using \\w in your regex.
If you want to use backslash as a literal, you have to type \\\\ as \ is also an escape character in regular expressions.
------------------------------------------------------------------------------------------------------------------------
\t   -  tabulation
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------























