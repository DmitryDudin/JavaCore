------------------------------------------------------------------------------------------------------------------------
The Java regex API also supports boundary matching.
If we care about where exactly in the input text the match should occur, then this is what we are looking for.
------------------------------------------------------------------------------------------------------------------------
- To match only when the required regex is true at the beginning of the text, we use the caret ^.
    int matches = runTest("^dog", "dogs are friendly");

- To match only when the required regex is true at the end of the text, we use the dollar character $.
    int matches = runTest("dog$", "Man's best friend is a dog");

- If we want a match only when the required text is found at a word boundary, we use \\b regex at the beginning and end of the regex:
    int matches = runTest("\\bdog\\b", "a dog is friendly");  --> 1

  The empty string at the beginning of a line is also a word boundary:
     int matches = runTest("\\bdog\\b", "dog is man's best friend");  --> 1

  These tests pass because the beginning of a String, as well as space between one text and another, marks a word boundary.

- Two-word characters appearing in a row does not mark a word boundary,
  but we can make it pass by changing the end of the regex to look for a non-word boundary:
    int matches = runTest("\\bdog\\b", "snoop dogg is a rapper");   --> 0
    int matches = runTest("\\bdog\\B", "snoop dogg is a rapper");   --> 1
-
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
