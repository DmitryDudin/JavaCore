------------------------------------------------------------------------------------------------------------------------
Unchecked Warnings:

Компиляция нашего приложения может выдать так называемый Unchecked Warning — предупреждение о том,
что компилятор не смог корректно определить уровень безопасности использования наших типов.
Это не ошибка, а предупреждение, так что его можно пропустить.
Но желательно все-так исправить, чтобы избежать проблем в будущем.

------------------------------------------------------------------------------------------------------------------------
Heap Pollution:

Как мы упомянули ранее, присваивание ссылки на Raw тип переменной параметризованного типа,
приводит к предупреждению «Unchecked assignment».
Если мы проигнорируем его, то возможна ситуация под названием "Heap Pollution" (загрязнение кучи).
Вот пример:

        static List<String> t() {
           List l = new ArrayList<Number>();
           l.add(1);
           List<String> ls = l; // (1)
           ls.add("");
           return ls;
        }

В строке (1) компилятор предупреждает об «Unchecked assignment».

---
Нужно привести и другой пример «загрязнения кучи» — когда у нас используются параметризованные объекты.
Кусок кода ниже наглядно показывает, что
недопустимо использовать параметризованные типы в качестве аргументов метода с использованием Varargs.(!!!!!!!!!!!!!!!!)
В данном случае параметр метода m – это List<String>…, т.е. фактически, массив элементов типа List<String>.
Учитывая правило отображения типов при затирании, тип stringLists превращается в массив raw списков (List[]),
 т.е. можно выполнить присваивание Object[] array = stringLists;
 и после записать в array объект, отличный от списка строк (1), что вызовет ClassCastException в строке (2).

        static void m(List<String>... stringLists) {
           Object[] array = stringLists;
           List<Integer> tmpList = Arrays.asList(42);
           array[0] = tmpList; // (1)
           String s = stringLists[0].get(0); // (2)
        }

---
Рассмотрим еще один пример:

        ArrayList<String> strings = new ArrayList<>();
        ArrayList arrayList = new ArrayList();
        arrayList = strings; // (1) Ok
        arrayList.add(1); // (2) unchecked call

Java разрешает выполнить присваивание в строке (1). Это необходимо для обеспечения обратной совместимости.
Но если мы попытаемся выполнить метод add в строке (2),
то получим предупреждение Unchecked call — компилятор предупреждает нас о возможной ошибке.
В самом деле, мы же пытаемся в список строк добавить целое число.

---
Игнорирование Unchecked Warnings может привести к «загрязнению кучи» и ошибкам во время выполнения программы.
---
Generics были созданы чтобы избежать Heap Pollution
---
Heap Pollution occurs when a variable of a parameterized type refers to an object that is not of that
parameterized type(Oracle docs).

        List<String> = List<Integer>

Heap Pollution - это когда параметризованный тип ссылается на параметризованный тип, но параметризованный чем-то другим.
---
------------------------------------------------------------------------------------------------------------------------
такая операция запрещена т.к. возможен heap pollution:

        List<Number>[] numListArray = new ArrayList<Number>[10];
        Object[] objects = numListArray;
        objects[0] = new ArrayList<String>();

        numListArray[0].add(1L);// <---  heap pollution

------------------------------------------------------------------------------------------------------------------------
массив дженериков можно создать с помощью varargs:

        //possible heap pollution from parameterized vararg type
            public void method(List<String>... stirngList) {
                Object[] objectsArr = stirngList;
                objectsArr[0] = Arrays.asList(42);
                String string0 = stirngList[0].get(0);//ClassCastException
            }

------------------------------------------------------------------------------------------------------------------------
