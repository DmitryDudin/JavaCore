------------------------------------------------------------------------------------------------------------------------
пример из класса Stream:

    public interface BaseStream<T, S extends BaseStream<T, S>>
        S sequential();
        S parallel();

    public interface Stream<T> extends BaseStream<T, Stream<T>> {

---
такая кончтрукция с рекурсивными дженериками позволяет переизпользовать методы предка,
как будто они в классе наследнике (!!!!!!!!!!!!!!!!!!!!!!!!!!!)
---
например изпользовать методы из BaseStream как-будто они есть в Stream
---
------------------------------------------------------------------------------------------------------------------------
Предположим  что :

    BaseStream<T> {
            BaseStream<T> sequential();
            BaseStream<T> parallel();
     }

    public interface Stream<T> extends BaseStream<T>

тогда:

stream.filter(Objects::nonNull)
       .parallel()
       .map(Integer::parseInt)  --- не сработает т.к. у BaseStream нет такого метода (!!!!!!!!!!!!!!!!!!!)

------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
