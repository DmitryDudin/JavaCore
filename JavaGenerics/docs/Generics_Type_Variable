------------------------------------------------------------------------------------------------------------------------

Когда мы записываем при объявлении класса или метода идентификатор в угловых скобках, например <T> или <E>,
то создаем переменную типа.
Переменная типа — это неквалифицированный идентификатор, который можно использовать в качестве типа в теле класса или метода.
Переменная типа может быть ограничена сверху.

        public static <T extends Comparable<T>> T max(Collection<T> coll) {
          T candidate = coll.iterator().next();
          for (T elt : coll) {
            if (candidate.compareTo(elt) < 0) candidate = elt;
          }
          return candidate;
        }

В этом примере выражение T extends Comparable<T> определяет T (переменную типа),
ограниченную сверху типом Comparable<T>.
В отличие от wildcard, переменные типа могут быть ограничены только сверху (только extends). (!!!!!!!!!!!!!!!!!!!!)
Нельзя записать super. Кроме того, в этом примере T зависит от самого себя,
это называется recursive bound — рекурсивная граница.

Вот еще пример из класса Enum:

        public abstract class Enum<E extends Enum<E>>implements Comparable<E>, Serializable

Здесь класс Enum параметризован типом E, который является подтипом от Enum<E>.

------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
