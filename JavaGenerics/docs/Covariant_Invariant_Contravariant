------------------------------------------------------------------------------------------------------------------------
Arrays are covariant.
    If Sub is a subtype of Super, then the array type Sub[] is a subtype of the array type Super[].

Generics, by contrast, are invariant:
    for any two distinct types Type1 and Type2, List is neither a subtype nor a supertype of List
------------------------------------------------------------------------------------------------------------------------
//Fails in runtime
Object[] objArr = new Long[3];
objArr[0] = "some text"; // Throws ArrayStoreException

//Won't compile
List<Object> objList = new ArrayList<Long>(); // incompatible types
------------------------------------------------------------------------------------------------------------------------
Ковариантность — это сохранение иерархии наследования исходных типов в производных типах в том же порядке.
Например, если Кошка — это подтип Животные, то Множество<Кошки> — это подтип Множество<Животные>.
Следовательно, с учетом принципа подстановки можно выполнить такое присваивание:

        Множество<Животные>  = Множество<Кошки>

------------------------------------------------------------------------------------------------------------------------
Контравариантность — это обращение иерархии исходных типов на противоположную в производных типах.
Например, если Кошка — это подтип Животные, то Множество<Животные> — это подтип Множество<Кошки>.
Следовательно,  с учетом принципа подстановки можно выполнить такое присваивание:

        Множество<Кошки> = Множество<Животные>

------------------------------------------------------------------------------------------------------------------------
Инвариантность — отсутствие наследования между производными типами.
Если Кошка — это подтип Животные,
        то Множество<Кошки> не является подтипом Множество<Животные>
        и Множество<Животные> не является подтипом Множество<Кошки>

------------------------------------------------------------------------------------------------------------------------
Массивы в Java ковариантны. Тип S[] является подтипом T[], если S — подтип T.
Пример присваивания:
        String[] strings = new String[] {"a", "b", "c"};
        Object[] arr = strings;

------------------------------------------------------------------------------------------------------------------------
Дженерики» инвариантны. Приведем пример:
        List<Integer> ints = Arrays.asList(1,2,3);
        List<Number> nums = ints; // compile-time error. Проблема обнаружилась на этапе компиляции
        nums.set(2, 3.14);
        assert ints.toString().equals("[1, 2, 3.14]");

Если взять список целых чисел, то он не будет являться ни подтипом типа Number, ни каким-либо другим подтипом.
Он является только подтипом самого себя. То есть List <Integer> — это List<Integer> и ничего больше.
Компилятор позаботится о том, чтобы переменная ints, объявленная как список объектов класса Integer,
содержала только объекты класса Integer и ничего кроме них. На этапе компиляции производится проверка,
и у нас в рантайме уже ничего не упадет.

------------------------------------------------------------------------------------------------------------------------
Всегда ли Generics инварианты? Нет. Приведу примеры:
        List<Integer> ints = new ArrayList<Integer>();
        List<? extends Number> nums = ints;

Это ковариантность. List<Integer> — подтип List<? extends Number>

        List<Number> nums = new ArrayList<Number>();
        List<? super Integer> ints = nums;

Это контравариантность. List<Number> является подтипом List<? super Integer>.
------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
