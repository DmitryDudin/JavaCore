------------------------------------------------------------------------------------------------------------------------
Reflection:

Хотя при компиляции параметризованные типы подвергаются процедуре стирания (type erasure),
кое-какую информацию мы можем получить с помощью Reflection.
    - Все reifiable доступны через механизм Reflection
    - Информация о типе полей класса, параметров методов и возвращаемых ими значений доступна через Reflection.

Если мы хотим через Reflection получить информацию о типе объекта и этот тип не Reifiable, то у нас ничего не получится.
Но, если, например, этот объект нам вернул какой-то метод, то мы можем получить тип возвращаемого этим методом значения:

        java.lang.reflect.Method.getGenericReturnType()

С появлением Generics класс java.lang.Class стал параметризованным. Рассмотрим вот этот код:

        List<Integer> ints = new ArrayList<Integer>();
        Class<? extends List> k = ints.getClass();
        assert k == ArrayList.class;

Переменная ints имеет тип List<Integer> и она содержит ссылку на объект типа ArrayList< Integer>.
Тогда ints.getClass() вернёт объект типа Class<ArrayLis>, так как List<Integer> затирается в List.
Объект типа Class<ArrayList> можно присвоить переменной k типа Class<? extends List>,
согласно ковариантности символов подстановки? extends.
А ArrayList.class возвращает объект типа Class<ArrayList>.

---
Если информация о типе доступна во время выполнения программы, то такой тип называется Reifiable.
К Reifiable типам относятся: примитивные типы, непараметризованные типы,
параметризованные типы с неограниченным символом подстановки, Raw типы и массивы, элементы которых являются reifiable.

Reflection не позволяет получить информацию о типе объекта, если он не Reifiable.
Но Reflection позволяет получить информацию о типе возвращаемого методом значения,
о типе аргументов метода и о типе полей класса.
------------------------------------------------------------------------------------------------------------------------
- мы не можем получить информацию дженериков в локальных инстансах
------------------------------------------------------------------------------------------------------------------------
- мы можем получить мета-информацию о классе, информацию о дженериках которая была задекларирована в классе
    - чем параметризованы поля класса
    - чем параметризованы методы класса
    - границы джененриков на уровне класса
------------------------------------------------------------------------------------------------------------------------
