------------------------------------------------------------------------------------------------------------------------
How can I add to List<? extends Number> data structures?
    https://stackoverflow.com/questions/2776975/how-can-i-add-to-list-extends-number-data-structures
------------------------------------------------------------------------------------------------------------------------
Generics in Java
    https://marcin-chwedczuk.github.io/generics-in-java
------------------------------------------------------------------------------------------------------------------------
Вместе с тем в Java можно реализовать своего рода ко- и контравариантность обобщенных типов, используя символ-джокер
и уточняющие спецификаторы:
        List<? extends Animal> будет ковариантен подставляемому типу, а List<? super Animal> — контравариантен.
------------------------------------------------------------------------------------------------------------------------
(!!!!!!!!!!!!!!!!)
Таким образом, ковариантность и контравариантность являются независимыми механизмами типобезопасности,
не исключающими друг друга, и могут и должны применяться в объектно-ориентированных языках программирования.

Контравариантность позволяет корректно устанавливать тип при создании подтипов (subtyping),
то есть, установить множество функций, позволяющее заменить другое множество функций в любом контексте.
В свою очередь, ковариантность характеризует специализацию кода, то есть замену старого кода новым
в определённых случаях.
------------------------------------------------------------------------------------------------------------------------
В контейнерах, допускающих запись объектов, ковариантность считается нежелательной,
поскольку она позволяет обходить контроль типов.
------------------------------------------------------------------------------------------------------------------------
Также, контейнеры, разрешающие запись, могут реализовывать два независимых интерфейса, ковариантный Producer<T>
и контравариантный Consumer<T>, в этом случае вышеописанный обход контроля типов сделать не удастся.
------------------------------------------------------------------------------------------------------------------------
(!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!)

List<? super Number> foo3
<? super Number> refers to the types of List<>s that can be assigned to foo3 -
                                                                not the kinds of things that can be added/read from it.
The kinds of things that can be added/removed from foo3
                          must be things that can be added/removed from any kind of List<> that can be assigned to foo3
------------------------------------------------------------------------------------------------------------------------
"List '<' ? extends Number> is actually an upper bound wildcard !

The upper-bounded wildcard says that any class that extends Number or Number itself can be used
as the formal parameter type:
The problem stems from the fact that Java doesn’t know what type List really is. It has to be an EXACT and UNIQUE Type.
------------------------------------------------------------------------------------------------------------------------
Note that List < ? extends Number > does not mean "list of objects of different types, all of which extend Number".
It means "list of objects of a single type which extends Number"
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------